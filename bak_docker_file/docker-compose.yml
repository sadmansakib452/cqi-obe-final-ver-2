#version: '3.8'  # Specify the Compose file format version

services:
  # =============================================================
  # MinIO Service (Object Storage)
  # =============================================================
  minio:
    image: minio/minio:latest
    container_name: minio
    environment:
      MINIO_ROOT_USER: ${MINIO_ROOT_USER}                # MinIO root username
      MINIO_ROOT_PASSWORD: ${MINIO_ROOT_PASSWORD}        # MinIO root password
      MINIO_ADDRESS: ":9000"                              # MinIO server address
      MINIO_CONSOLE_ADDRESS: ":9001"                      # MinIO console address
    command: server /data                                 # Command to start MinIO server
    ports:
      - "9000:9000"                                        # Expose MinIO server port
      - "9001:9001"                                        # Expose MinIO console port
    volumes:
      - minio-data:/data                                   # Persist MinIO data
    restart: always                                       # Always restart the container on failure
    networks:
      - app-network                                       # Connect to the app network

  # =============================================================
  # Next.js Application Service
  # =============================================================
  app:
    build:
      context: .                                          # Build context is the current directory
      dockerfile: Dockerfile                              # Dockerfile path
    container_name: nextjs_app
    environment:
      DATABASE_URL: ${DATABASE_URL}                       # Database connection URL
      AUTH_SECRET: ${AUTH_SECRET}                         # Authentication secret key
      AUTH_URL: ${AUTH_URL}                               # Authentication URL
      GOOGLE_CLIENT_ID: ${GOOGLE_CLIENT_ID}               # Google OAuth Client ID
      GOOGLE_CLIENT_SECRET: ${GOOGLE_CLIENT_SECRET}       # Google OAuth Client Secret
      GITHUB_CLIENT_ID: ${GITHUB_CLIENT_ID}               # GitHub OAuth Client ID
      GITHUB_CLIENT_SECRET: ${GITHUB_CLIENT_SECRET}       # GitHub OAuth Client Secret
      NODEMAILER_GOOGLE_SMTP_USER: ${NODEMAILER_GOOGLE_SMTP_USER}     # Nodemailer SMTP user
      NODEMAILER_GOOGLE_ACCESS_TOKEN: ${NODEMAILER_GOOGLE_ACCESS_TOKEN} # Nodemailer access token
      NODEMAILER_GOOGLE_REFRESH_TOKEN: ${NODEMAILER_GOOGLE_REFRESH_TOKEN} # Nodemailer refresh token
      NEXT_PUBLIC_MINIO_URL: ${MINIO_ENDPOINT}            # Public URL for MinIO
      NEXT_PUBLIC_MINIO_ACCESS_KEY: ${MINIO_ACCESS_KEY}   # MinIO access key
      NEXT_PUBLIC_MINIO_SECRET_KEY: ${MINIO_SECRET_KEY}   # MinIO secret key
    ports:
      - "3001:3000"                                        # Expose Next.js application port
    volumes:
      - ./data:/app/data                                   # Persist application data
    depends_on:
      - minio                                              # Ensure MinIO is running before the app
    restart: always                                       # Always restart the container on failure
    networks:
      - app-network                                       # Connect to the app network

  # =============================================================
  # Python Server Service
  # =============================================================
  python_server:
    build:
      context: ./python_server                             # Build context pointing to Python server directory
      dockerfile: Dockerfile                              # Dockerfile for Python server
    container_name: python_server
    env_file:
      - ./python_server/.env                              # Reference to Python server's .env file
    environment:
      PYTHON_ENV: production                              # Set Python environment to production
    ports:
      - "3005:3005"                                        # Expose Python server port
    volumes:
      - ./python_server:/app                               # Mount Python server code for live updates
    depends_on:
      - minio                                              # Ensure MinIO is running before the Python server
      - app                                                # Ensure Next.js app is running before the Python server
    restart: always                                       # Always restart the container on failure
    networks:
      - app-network                                       # Connect to the app network

  # =============================================================
  # Nginx Service
  # =============================================================
  nginx:
    image: nginx:latest
    container_name: nginx_server
    restart: unless-stopped                                # Restart unless the container is explicitly stopped
    ports:
      - "4000:4000"                                          # Expose HTTP port on host port 4000
      - "4443:4443"                                         # Expose HTTPS port on host port 4443 (optional)
    volumes:
      - ./nginx/nginx.conf:/etc/nginx/nginx.conf         # Mount Nginx configuration
      - ./ssl:/etc/nginx/ssl                              # Mount existing SSL certificates
    depends_on:
      - app
      - python_server                                      # Ensure dependencies are running before Nginx
      - minio                                               # Ensure MinIO is running before Nginx
    networks:
      - app-network                                       # Connect to the app network

# =============================================================
# Volumes
# =============================================================
volumes:
  minio-data:
    driver: local                                         # Use local driver for MinIO data persistence

# =============================================================
# Networks
# =============================================================
networks:
  app-network:
    driver: bridge                                        # Use bridge network driver for inter-service communication
