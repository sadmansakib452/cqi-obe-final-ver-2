# File: docker-compose.yml

services:
  # MinIO Service
  minio:
    image: minio/minio:latest
    container_name: minio
    environment:
      - MINIO_ROOT_USER=${MINIO_ROOT_USER}
      - MINIO_ROOT_PASSWORD=${MINIO_ROOT_PASSWORD}
      - MINIO_ADDRESS=:9000
      - MINIO_CONSOLE_ADDRESS=:9001
    command: server /data
    ports:
      - "9000:9000"
      - "9001:9001"
    volumes:
      - minio-data:/data
    restart: always
    networks:
      - app-network

  # Next.js Application Service
  app:
    build:
      context: .
      dockerfile: Dockerfile
    container_name: nextjs_app
    environment:
      - DATABASE_URL=${DATABASE_URL}
      - AUTH_SECRET=${AUTH_SECRET}
      - AUTH_URL=${AUTH_URL}
      - GOOGLE_CLIENT_ID=${GOOGLE_CLIENT_ID}
      - GOOGLE_CLIENT_SECRET=${GOOGLE_CLIENT_SECRET}
      - GITHUB_CLIENT_ID=${GITHUB_CLIENT_ID}
      - GITHUB_CLIENT_SECRET=${GITHUB_CLIENT_SECRET}
      - NODEMAILER_GOOGLE_SMTP_USER=${NODEMAILER_GOOGLE_SMTP_USER}
      - NODEMAILER_GOOGLE_ACCESS_TOKEN=${NODEMAILER_GOOGLE_ACCESS_TOKEN}
      - NODEMAILER_GOOGLE_REFRESH_TOKEN=${NODEMAILER_GOOGLE_REFRESH_TOKEN}
      - NEXT_PUBLIC_MINIO_URL=${MINIO_ENDPOINT}
      - NEXT_PUBLIC_MINIO_ACCESS_KEY=${MINIO_ACCESS_KEY}
      - NEXT_PUBLIC_MINIO_SECRET_KEY=${MINIO_SECRET_KEY}
    ports:
      - "3000:3000"
    volumes:
      - ./data:/app/data
    depends_on:
      - minio
    restart: always
    networks:
      - app-network

  # Python Server Service
  python_server:
    build:
      context: ./python_server       # Build context pointing to Python server directory
      dockerfile: Dockerfile         # Dockerfile for Python server
    container_name: python_server
    env_file:
      - ./python_server/.env        # Reference to Python server's .env file
    environment:
      - PYTHON_ENV=production        # Additional environment variables if needed
    ports:
      - "3005:3005"                  # Expose port 3005
    volumes:
      - ./python_server:/app         # Mount code for live updates (useful for development)
    depends_on:
      - minio                        # Ensure MinIO is up before Python server
      - app                          # Ensure Next.js app is up before Python server
    restart: always
    networks:
      - app-network                  # Connect to the same network for inter-service communication

  # Nginx Service
  nginx:
    container_name: nginx_server
    restart: unless-stopped
    image: nginx:latest
    ports:
      - "80:80"
      - "443:443"
    volumes:
      - ./nginx/nginx.conf:/etc/nginx/nginx.conf   # Mount Nginx configuration
      - ./certbot/conf:/etc/letsencrypt            # SSL certificates folder
      - ./certbot/www:/var/www/certbot             # Certbot challenge webroot
    depends_on:
      - app
      - python_server                                # Ensure Python server is up before Nginx
    networks:
      - app-network                                  # Connect to the same network

  # Certbot for SSL Certificates
  certbot:
    image: certbot/certbot
    container_name: certbot
    volumes:
      - ./certbot/conf:/etc/letsencrypt
      - ./certbot/www:/var/www/certbot
    entrypoint: /bin/sh -c
    command: |
      if [ ! -f /etc/letsencrypt/live/sadman-workbench.zapto.org/fullchain.pem ]; then
        certbot certonly --webroot -w /var/www/certbot --email sadmansakib452@gmail.com -d sadman-workbench.zapto.org --agree-tos --non-interactive
      fi
      while :; do
        certbot renew --webroot -w /var/www/certbot --post-hook "nginx -s reload"
        sleep 12h
      done
    depends_on:
      - nginx
    networks:
      - app-network                                  # Connect to the same network

volumes:
  minio-data:
    driver: local

networks:
  app-network:
    driver: bridge
