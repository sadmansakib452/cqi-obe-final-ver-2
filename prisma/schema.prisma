datasource db {
  provider = "mongodb"
  url      = env("DATABASE_URL")
}

generator client {
  provider = "prisma-client-js"
}

// Enum for user roles
enum Role {
  user
  admin
}

// User model
model User {
  id            String   @id @default(auto()) @map("_id") @db.ObjectId
  name          String?
  email         String   @unique
  emailVerified DateTime?
  image         String?
  password      String?
  role          Role     @default(user)
  accounts      Account[]
  sessions      Session[]
  authenticators Authenticator[]
}

// Admin email addresses model
model AdminUserEmailAddresses {
  id    String @id @default(auto()) @map("_id") @db.ObjectId
  email String @unique
}

// Account model
model Account {
  id                String     @id @default(auto()) @map("_id") @db.ObjectId
  userId            String     @db.ObjectId
  type              String
  provider          String
  providerAccountId String
  refresh_token     String?
  access_token      String?
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String?
  session_state     String?
  user              User       @relation(fields: [userId], references: [id])

  @@unique([provider, providerAccountId], name: "provider_providerAccountId")
}

// Session model
model Session {
  id           String   @id @default(auto()) @map("_id") @db.ObjectId
  sessionToken String   @unique
  userId       String   @db.ObjectId
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id])
}

// Verification Token model
model VerificationToken {
  id          String   @id @default(auto()) @map("_id") @db.ObjectId
  identifier  String
  token       String
  expires     DateTime
  @@unique([identifier, token])
}

// Authenticator model
model Authenticator {
  id                  String   @id @default(auto()) @map("_id") @db.ObjectId
  credentialID        String
  userId              String   @db.ObjectId
  providerAccountId   String
  credentialPublicKey String
  counter             Int
  credentialDeviceType String
  credentialBackedUp  Boolean
  transports          String?
  user                User     @relation(fields: [userId], references: [id])
  @@unique([userId, credentialID])
}
