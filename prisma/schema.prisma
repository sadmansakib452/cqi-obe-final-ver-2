datasource db {
  provider = "mongodb"
  url      = env("DATABASE_URL")
}

generator client {
  provider = "prisma-client-js"
}

// Enum for user roles
enum Role {
  user
  admin
}

// User model: Each user (faculty/admin) has a role and a list of course files they own
model User {
  id             String          @id @default(auto()) @map("_id") @db.ObjectId
  name           String?
  email          String          @unique
  emailVerified  DateTime?
  image          String?
  password       String?
  role           Role            @default(user)
  accounts       Account[]
  sessions       Session[]
  authenticators Authenticator[]

  // Each user can have multiple course files (faculty ownership)
  courseFiles CourseFiles[]
}

// Admin email addresses model
model AdminUserEmailAddresses {
  id    String @id @default(auto()) @map("_id") @db.ObjectId
  email String @unique
}

// Account model for authentication
model Account {
  id                String  @id @default(auto()) @map("_id") @db.ObjectId
  userId            String  @db.ObjectId
  type              String
  provider          String
  providerAccountId String
  refresh_token     String?
  access_token      String?
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String?
  session_state     String?
  user              User    @relation(fields: [userId], references: [id])

  @@unique([provider, providerAccountId], name: "provider_providerAccountId")
}

// Session model
model Session {
  id           String   @id @default(auto()) @map("_id") @db.ObjectId
  sessionToken String   @unique
  userId       String   @db.ObjectId
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id])
}

// Verification Token model
model VerificationToken {
  id         String   @id @default(auto()) @map("_id") @db.ObjectId
  identifier String
  token      String
  expires    DateTime

  @@unique([identifier, token])
}

// Authenticator model for multi-factor authentication
model Authenticator {
  id                   String  @id @default(auto()) @map("_id") @db.ObjectId
  credentialID         String
  userId               String  @db.ObjectId
  providerAccountId    String
  credentialPublicKey  String
  counter              Int
  credentialDeviceType String
  credentialBackedUp   Boolean
  transports           String?
  user                 User    @relation(fields: [userId], references: [id])

  @@unique([userId, credentialID])
}

// Model for course files
model CourseFiles {
  id             String     @id @default(auto()) @map("_id") @db.ObjectId
  courseFileName String // Name of the course file (e.g., "2024.1.CSE487-5")
  userId         String     @db.ObjectId // Foreign key linking the user who created this course file
  user           User       @relation(fields: [userId], references: [id])
  createdAt      DateTime   @default(now())
  updatedAt      DateTime   @updatedAt
  finalGrades    String?
  summaryObe     String?
  insFeedback    String?
  courseOutline  String?
  assignment     String?
  labExperiment  String?
  midExams       MidExam[]
  quizExams      QuizExam[]
  finalExam      FinalExam?
  isCompleted    Boolean    @default(false)

  // Compound unique constraint on courseFileName and userId
  @@unique([courseFileName, userId])
}

// Model to store mid-exam related files (1-to-many with CourseFiles)
model MidExam {
  id          String   @id @default(auto()) @map("_id") @db.ObjectId
  question    String? // URL for mid-exam question
  highest     String? // URL for highest scoring answer script
  average     String? // URL for average scoring answer script
  marginal    String? // URL for marginal script
  isCompleted Boolean  @default(false) // Track if mid-exam upload is completed
  timestamp   DateTime @default(now()) // When the files were uploaded

  courseFilesId String      @db.ObjectId
  courseFiles   CourseFiles @relation(fields: [courseFilesId], references: [id])
  index         String // This is the index for Mid-1, Mid-2, etc.

  @@unique([courseFilesId, index]) // Composite unique constraint
}

// Model to store quiz exam related files (1-to-many with CourseFiles)
model QuizExam {
  id          String   @id @default(auto()) @map("_id") @db.ObjectId
  question    String? // URL for mid-exam question
  highest     String? // URL for highest scoring answer script
  average     String? // URL for average scoring answer script
  marginal    String? // URL for marginal script
  isCompleted Boolean  @default(false) // Track if mid-exam upload is completed
  timestamp   DateTime @default(now()) // When the files were uploaded

  courseFilesId String      @db.ObjectId
  courseFiles   CourseFiles @relation(fields: [courseFilesId], references: [id])
  index         String // This is the index for Mid-1, Mid-2, etc.

  @@unique([courseFilesId, index]) // Composite unique constraint
}

// Model to store final exam related files (1-to-1 with CourseFiles)
model FinalExam {
  id                 String   @id @default(auto()) @map("_id") @db.ObjectId
  question      String? // URL for final exam question
  highest String? // URL for highest scoring final answer script
  average String? // URL for average scoring final answer script
  marginal      String? // URL for marginal final answer script
  isCompleted        Boolean  @default(false) // Track if final exam upload is completed
  timestamp          DateTime @default(now()) // When the files were uploaded

  // Foreign key to course files
  courseFilesId String      @unique @db.ObjectId // UNIQUE for 1-to-1 relation
  courseFiles   CourseFiles @relation(fields: [courseFilesId], references: [id])
}



model AuthorizedEmail {
  id    String @id @default(auto()) @map("_id") @db.ObjectId
  email String @unique
}

model AuthorizedDomain {
  id     String @id @default(auto()) @map("_id") @db.ObjectId
  domain String @unique
}
